package com.pma.smsecure.Dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.pma.smsecure.Dao.SMS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SMS.
*/
public class SMSDao extends AbstractDao<SMS, Long> {

    public static final String TABLENAME = "SMS";

    /**
     * Properties of entity SMS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
        public final static Property IsRead = new Property(2, boolean.class, "isRead", false, "IS_READ");
        public final static Property Time = new Property(3, java.util.Date.class, "time", false, "TIME");
        public final static Property Folder = new Property(4, String.class, "folder", false, "FOLDER");
        public final static Property IsEncrypted = new Property(5, Boolean.class, "isEncrypted", false, "IS_ENCRYPTED");
        public final static Property Phone_id_sms = new Property(6, Integer.class, "phone_id_sms", false, "PHONE_ID_SMS");
        public final static Property ConversationId = new Property(7, Long.class, "conversationId", false, "CONVERSATION_ID");
    };

    private DaoSession daoSession;

    private Query<SMS> conversation_SmslistQuery;

    public SMSDao(DaoConfig config) {
        super(config);
    }
    
    public SMSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SMS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MESSAGE' TEXT," + // 1: message
                "'IS_READ' INTEGER NOT NULL ," + // 2: isRead
                "'TIME' INTEGER NOT NULL ," + // 3: time
                "'FOLDER' TEXT NOT NULL ," + // 4: folder
                "'IS_ENCRYPTED' INTEGER," + // 5: isEncrypted
                "'PHONE_ID_SMS' INTEGER," + // 6: phone_id_sms
                "'CONVERSATION_ID' INTEGER);"); // 7: conversationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SMS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
        stmt.bindLong(3, entity.getIsRead() ? 1l: 0l);
        stmt.bindLong(4, entity.getTime().getTime());
        stmt.bindString(5, entity.getFolder());
 
        Boolean isEncrypted = entity.getIsEncrypted();
        if (isEncrypted != null) {
            stmt.bindLong(6, isEncrypted ? 1l: 0l);
        }
 
        Integer phone_id_sms = entity.getPhone_id_sms();
        if (phone_id_sms != null) {
            stmt.bindLong(7, phone_id_sms);
        }
 
        Long conversationId = entity.getConversationId();
        if (conversationId != null) {
            stmt.bindLong(8, conversationId);
        }
    }

    @Override
    protected void attachEntity(SMS entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SMS readEntity(Cursor cursor, int offset) {
        SMS entity = new SMS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message
            cursor.getShort(offset + 2) != 0, // isRead
            new java.util.Date(cursor.getLong(offset + 3)), // time
            cursor.getString(offset + 4), // folder
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isEncrypted
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // phone_id_sms
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // conversationId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SMS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsRead(cursor.getShort(offset + 2) != 0);
        entity.setTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setFolder(cursor.getString(offset + 4));
        entity.setIsEncrypted(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setPhone_id_sms(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setConversationId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SMS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SMS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "smslist" to-many relationship of Conversation. */
    public List<SMS> _queryConversation_Smslist(Long conversationId) {
        synchronized (this) {
            if (conversation_SmslistQuery == null) {
                QueryBuilder<SMS> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ConversationId.eq(null));
                conversation_SmslistQuery = queryBuilder.build();
            }
        }
        Query<SMS> query = conversation_SmslistQuery.forCurrentThread();
        query.setParameter(0, conversationId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getConversationDao().getAllColumns());
            builder.append(" FROM SMS T");
            builder.append(" LEFT JOIN CONVERSATION T0 ON T.'CONVERSATION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SMS loadCurrentDeep(Cursor cursor, boolean lock) {
        SMS entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Conversation conversation = loadCurrentOther(daoSession.getConversationDao(), cursor, offset);
        entity.setConversation(conversation);

        return entity;    
    }

    public SMS loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SMS> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SMS> list = new ArrayList<SMS>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SMS> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SMS> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
