package com.pma.smsecure.Dao;

import java.util.List;
import com.pma.smsecure.Dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CONVERSATION.
 */
public class Conversation {

    private Long id;
    private Integer phone_id_conversation;
    private Boolean isSecure;
    private Integer smsCount;
    private String phoneNumberC;
    private String senderName;
    private String snippet;
    private java.util.Date timeForLastSMS;
    private Long contactId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConversationDao myDao;

    private Contact contact;
    private Long contact__resolvedKey;

    private List<SMS> smslist;

    public Conversation() {
    }

    public Conversation(Long id) {
        this.id = id;
    }

    public Conversation(Long id, Integer phone_id_conversation, Boolean isSecure, Integer smsCount, String phoneNumberC, String senderName, String snippet, java.util.Date timeForLastSMS, Long contactId) {
        this.id = id;
        this.phone_id_conversation = phone_id_conversation;
        this.isSecure = isSecure;
        this.smsCount = smsCount;
        this.phoneNumberC = phoneNumberC;
        this.senderName = senderName;
        this.snippet = snippet;
        this.timeForLastSMS = timeForLastSMS;
        this.contactId = contactId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConversationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getPhone_id_conversation() {
        return phone_id_conversation;
    }

    public void setPhone_id_conversation(Integer phone_id_conversation) {
        this.phone_id_conversation = phone_id_conversation;
    }

    public Boolean getIsSecure() {
        return isSecure;
    }

    public void setIsSecure(Boolean isSecure) {
        this.isSecure = isSecure;
    }

    public Integer getSmsCount() {
        return smsCount;
    }

    public void setSmsCount(Integer smsCount) {
        this.smsCount = smsCount;
    }

    public String getPhoneNumberC() {
        return phoneNumberC;
    }

    public void setPhoneNumberC(String phoneNumberC) {
        this.phoneNumberC = phoneNumberC;
    }

    public String getSenderName() {
        return senderName;
    }

    public void setSenderName(String senderName) {
        this.senderName = senderName;
    }

    public String getSnippet() {
        return snippet;
    }

    public void setSnippet(String snippet) {
        this.snippet = snippet;
    }

    public java.util.Date getTimeForLastSMS() {
        return timeForLastSMS;
    }

    public void setTimeForLastSMS(java.util.Date timeForLastSMS) {
        this.timeForLastSMS = timeForLastSMS;
    }

    public Long getContactId() {
        return contactId;
    }

    public void setContactId(Long contactId) {
        this.contactId = contactId;
    }

    /** To-one relationship, resolved on first access. */
    public Contact getContact() {
        Long __key = this.contactId;
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDao targetDao = daoSession.getContactDao();
            Contact contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    public void setContact(Contact contact) {
        synchronized (this) {
            this.contact = contact;
            contactId = contact == null ? null : contact.getId();
            contact__resolvedKey = contactId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SMS> getSmslist() {
        if (smslist == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SMSDao targetDao = daoSession.getSMSDao();
            List<SMS> smslistNew = targetDao._queryConversation_Smslist(id);
            synchronized (this) {
                if(smslist == null) {
                    smslist = smslistNew;
                }
            }
        }
        return smslist;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSmslist() {
        smslist = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
