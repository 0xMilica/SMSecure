package com.pma.smsecure.Dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.pma.smsecure.Dao.Conversation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONVERSATION.
*/
public class ConversationDao extends AbstractDao<Conversation, Long> {

    public static final String TABLENAME = "CONVERSATION";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone_id_conversation = new Property(1, Integer.class, "phone_id_conversation", false, "PHONE_ID_CONVERSATION");
        public final static Property IsSecure = new Property(2, Boolean.class, "isSecure", false, "IS_SECURE");
        public final static Property SmsCount = new Property(3, Integer.class, "smsCount", false, "SMS_COUNT");
        public final static Property PhoneNumberC = new Property(4, String.class, "phoneNumberC", false, "PHONE_NUMBER_C");
        public final static Property SenderName = new Property(5, String.class, "senderName", false, "SENDER_NAME");
        public final static Property Snippet = new Property(6, String.class, "snippet", false, "SNIPPET");
        public final static Property TimeForLastSMS = new Property(7, java.util.Date.class, "timeForLastSMS", false, "TIME_FOR_LAST_SMS");
        public final static Property ContactId = new Property(8, Long.class, "contactId", false, "CONTACT_ID");
    };

    private DaoSession daoSession;


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONVERSATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PHONE_ID_CONVERSATION' INTEGER," + // 1: phone_id_conversation
                "'IS_SECURE' INTEGER," + // 2: isSecure
                "'SMS_COUNT' INTEGER," + // 3: smsCount
                "'PHONE_NUMBER_C' TEXT," + // 4: phoneNumberC
                "'SENDER_NAME' TEXT," + // 5: senderName
                "'SNIPPET' TEXT," + // 6: snippet
                "'TIME_FOR_LAST_SMS' INTEGER," + // 7: timeForLastSMS
                "'CONTACT_ID' INTEGER);"); // 8: contactId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONVERSATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer phone_id_conversation = entity.getPhone_id_conversation();
        if (phone_id_conversation != null) {
            stmt.bindLong(2, phone_id_conversation);
        }
 
        Boolean isSecure = entity.getIsSecure();
        if (isSecure != null) {
            stmt.bindLong(3, isSecure ? 1l: 0l);
        }
 
        Integer smsCount = entity.getSmsCount();
        if (smsCount != null) {
            stmt.bindLong(4, smsCount);
        }
 
        String phoneNumberC = entity.getPhoneNumberC();
        if (phoneNumberC != null) {
            stmt.bindString(5, phoneNumberC);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(6, senderName);
        }
 
        String snippet = entity.getSnippet();
        if (snippet != null) {
            stmt.bindString(7, snippet);
        }
 
        java.util.Date timeForLastSMS = entity.getTimeForLastSMS();
        if (timeForLastSMS != null) {
            stmt.bindLong(8, timeForLastSMS.getTime());
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(9, contactId);
        }
    }

    @Override
    protected void attachEntity(Conversation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // phone_id_conversation
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isSecure
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // smsCount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phoneNumberC
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // senderName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // snippet
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // timeForLastSMS
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // contactId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone_id_conversation(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsSecure(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setSmsCount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPhoneNumberC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSenderName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSnippet(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimeForLastSMS(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setContactId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Conversation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Conversation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getContactDao().getAllColumns());
            builder.append(" FROM CONVERSATION T");
            builder.append(" LEFT JOIN CONTACT T0 ON T.'CONTACT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Conversation loadCurrentDeep(Cursor cursor, boolean lock) {
        Conversation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Contact contact = loadCurrentOther(daoSession.getContactDao(), cursor, offset);
        entity.setContact(contact);

        return entity;    
    }

    public Conversation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Conversation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Conversation> list = new ArrayList<Conversation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Conversation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Conversation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
